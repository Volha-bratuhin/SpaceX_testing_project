{
	"info": {
		"_postman_id": "cd3e7163-7949-44fd-b937-3c747d80e3c2",
		"name": "SpaceX_API_Rockets_VolhaBrtuhin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34748278"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "Get all Rockets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// One more way to set Env Var \r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"RocketsID\", jsonData[2].id);\r",
									"pm.environment.set(\"HM\", jsonData[2].height.meters);\r",
									"pm.environment.set(\"HF\", jsonData[2].height.feet);\r",
									"pm.environment.set(\"DM\", jsonData[2].diameter.meters);\r",
									"pm.environment.set(\"DF\", jsonData[2].diameter.feet);\r",
									"pm.environment.set(\"MKG\", jsonData[2].mass.kg);\r",
									"pm.environment.set(\"MLB\", jsonData[2].mass.lb);\r",
									"pm.environment.set(\"FSTKN\", jsonData[2].first_stage.thrust_sea_level.kN);\r",
									"pm.environment.set(\"FSTLBF\", jsonData[2].first_stage.thrust_sea_level.lbf);\r",
									"pm.environment.set(\"SSTKN\", jsonData[2].second_stage.thrust.kN);\r",
									"pm.environment.set(\"SSTLBF\", jsonData[2].second_stage.thrust.lbf);\r",
									"pm.environment.set(\"SSPHM\", jsonData[2].second_stage.payloads.composite_fairing.height.meters);\r",
									"pm.environment.set(\"SSPHF\", jsonData[2].second_stage.payloads.composite_fairing.height.feet);\r",
									"pm.environment.set(\"NAME\", jsonData[2].name);\r",
									"pm.environment.set(\"COMPANY\", jsonData[2].company);\r",
									"pm.environment.set(\"WIKI\", jsonData[2].wikipedia);\r",
									"\r",
									"//Test1. Validate status code\r",
									"if (responseCode.code === 200) {\r",
									"    tests[\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not authorised, Check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests[\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"//Test2. Validate the response time\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Test3. Validate the response size\r",
									"pm.test(\"Response size is less than 50KB\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(51200);\r",
									"});\r",
									"\r",
									"//Test4. Response should be okay to process\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"//Test5. Verify response headers\r",
									"pm.test(\"Response Header is present and correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"CF-Cache-Status\", \"DYNAMIC\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"    pm.response.to.have.header(\"Server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"//Test6. Verify response body\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"height\");\r",
									"    pm.expect(pm.response.text()).to.include(\"meters\");\r",
									"    pm.expect(pm.response.text()).to.include(\"diameter\");\r",
									"    pm.expect(pm.response.text()).to.include(\"mass\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_stage\");\r",
									"    pm.expect(pm.response.text()).to.include(\"thrust_sea_level\");\r",
									"    pm.expect(pm.response.text()).to.include(\"reusable\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_stage\");\r",
									"});\r",
									"\r",
									"//Test7. Verify response value\r",
									"pm.test(\"Value is correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].height.meters).to.eql(22.25);\r",
									"    pm.expect(jsonData[0].diameter.feet).to.eql(5.5);\r",
									"    pm.expect(jsonData[0].first_stage.thrust_sea_level.kN).to.eql(420);\r",
									"    pm.expect(jsonData[0].second_stage.thrust.lbf).to.eql(7000);\r",
									"    pm.expect(jsonData[0].second_stage.payloads.composite_fairing.height.meters).to.eql(3.5);\r",
									"    pm.expect(jsonData[0].name).to.eql(\"Falcon 1\");\r",
									"    pm.expect(jsonData[0].company).to.eql(\"SpaceX\");\r",
									"    pm.expect(jsonData[0].wikipedia).to.eql(\"https://en.wikipedia.org/wiki/Falcon_1\");\r",
									"    pm.expect(jsonData[0].id).to.eql(\"5e9d0d95eda69955f709d1eb\");\r",
									"});\r",
									"\r",
									"//Test8. Verify response body format\r",
									"pm.test(\"Response body should be in the correct format\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].height.meters).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse[0].first_stage.thrust_sea_level.kN).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse[0].second_stage.payloads.composite_fairing.height.meters).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse[0].name).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse[0].company).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse[0].wikipedia).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse[0].id).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Test9. Verify the length of the response data\r",
									"pm.test(\"The response data length must be greater than zero\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(Object.keys(responseData).length).to.be.above(0, \"Response data should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "spacex-key",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one Rocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1. Validate status code\r",
									"if (responseCode.code === 200) {\r",
									"    tests[\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not authorised, Check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests[\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"//Test2. Validate the response time\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Test3. Validate the response size\r",
									"pm.test(\"Response size is less than 50KB\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(51200);\r",
									"});\r",
									"\r",
									"//Test4. Response should be okay to process\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"//Test5. Verify response headers\r",
									"pm.test(\"Response Header is present and correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"CF-Cache-Status\", \"DYNAMIC\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"    pm.response.to.have.header(\"Server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"//Test6. Verify response body\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"height\");\r",
									"    pm.expect(pm.response.text()).to.include(\"diameter\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_stage\");\r",
									"    pm.expect(pm.response.text()).to.include(\"thrust_sea_level\");\r",
									"    pm.expect(pm.response.text()).to.include(\"reusable\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_stage\");\r",
									"});\r",
									"\r",
									"//Test7. Response contains correct text\r",
									"pm.test(\"Response contains correct text\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"NAME\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COMPANY\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"WIKI\"));\r",
									"    pm.expect(pm.response.text()).to.include.toString(pm.environment.get(\"HM\"));\r",
									"    pm.expect(pm.response.text()).to.include.toString(pm.environment.get(\"FSTKN\"));\r",
									"    pm.expect(pm.response.text()).to.include.toString(pm.environment.get(\"SSPHF\"));\r",
									"});\r",
									"\r",
									"//Test8. Verify response value\r",
									"pm.test(\"Value is correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.height.meters).to.eql.toString(pm.environment.get(\"HM\"));\r",
									"    pm.expect(jsonData.diameter.feet).to.eql.toString(pm.environment.get(\"DF\"));\r",
									"    pm.expect(jsonData.first_stage.thrust_sea_level.kN).to.eql.toString(pm.environment.get(\"FSTKN\"));\r",
									"    pm.expect(jsonData.second_stage.thrust.lbf).to.eql.toString(pm.environment.get(\"SSTLBF\"));\r",
									"    pm.expect(jsonData.second_stage.payloads.composite_fairing.height.meters).to.eql.toString(pm.environment.get(\"SSPHM\"));\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"NAME\"));\r",
									"    pm.expect(jsonData.company).to.eql(pm.environment.get(\"COMPANY\"));\r",
									"    pm.expect(jsonData.wikipedia).to.eql(pm.environment.get(\"WIKI\"));\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"RocketsID\"));\r",
									"});\r",
									"\r",
									"//Test9. Verify response body format\r",
									"pm.test(\"Response body should be in the correct format\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.height.meters).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.first_stage.thrust_sea_level.kN).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.second_stage.payloads.composite_fairing.height.meters).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse.company).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse.wikipedia).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse.id).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Test10. Verify the length of the response data\r",
									"pm.test(\"The response data length must be greater than zero\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(Object.keys(responseData).length).to.be.above(0, \"Response data should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "spacex-key",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spacexdata.com/v4/rockets/{{RocketsID}}",
							"protocol": "https",
							"host": [
								"api",
								"spacexdata",
								"com"
							],
							"path": [
								"v4",
								"rockets",
								"{{RocketsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Rockets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1. Validate status code\r",
									"if (responseCode.code === 200) {\r",
									"    tests[\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not authorised, Check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests[\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"//Test2. Validate the response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Test3. Validate the response size\r",
									"pm.test(\"Response size is less than 50KB\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(51200);\r",
									"});\r",
									"\r",
									"//Test4. Response should be okay to process\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"//Test5. Verify response headers\r",
									"pm.test(\"Response Header is present and correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"CF-Cache-Status\", \"DYNAMIC\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"    pm.response.to.have.header(\"Server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"//Test6. Verify response body\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"height\");\r",
									"    pm.expect(pm.response.text()).to.include(\"meters\");\r",
									"    pm.expect(pm.response.text()).to.include(\"diameter\");\r",
									"    pm.expect(pm.response.text()).to.include(\"mass\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_stage\");\r",
									"    pm.expect(pm.response.text()).to.include(\"thrust_sea_level\");\r",
									"    pm.expect(pm.response.text()).to.include(\"reusable\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_stage\");\r",
									"});\r",
									"\r",
									"//Test7. Verify response value\r",
									"pm.test(\"Value is correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.docs[0].height.meters).to.eql(22.25);\r",
									"    pm.expect(jsonData.docs[0].diameter.feet).to.eql(5.5);\r",
									"    pm.expect(jsonData.docs[0].first_stage.thrust_sea_level.kN).to.eql(420);\r",
									"    pm.expect(jsonData.docs[0].second_stage.thrust.lbf).to.eql(7000);\r",
									"    pm.expect(jsonData.docs[0].second_stage.payloads.composite_fairing.height.meters).to.eql(3.5);\r",
									"    pm.expect(jsonData.docs[0].name).to.eql(\"Falcon 1\");\r",
									"    pm.expect(jsonData.docs[0].company).to.eql(\"SpaceX\");\r",
									"    pm.expect(jsonData.docs[0].wikipedia).to.eql(\"https://en.wikipedia.org/wiki/Falcon_1\");\r",
									"    pm.expect(jsonData.docs[0].id).to.eql(\"5e9d0d95eda69955f709d1eb\");\r",
									"});\r",
									"\r",
									"//Test8. Verify response body format\r",
									"pm.test(\"Response body should be in the correct format\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.docs[0].height.meters).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.docs[0].first_stage.thrust_sea_level.kN).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.docs[0].second_stage.payloads.composite_fairing.height.meters).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.docs[0].name).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse.docs[0].company).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse.docs[0].wikipedia).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse.docs[0].id).to.be.a(\"string\");\r",
									"});\r",
									" \r",
									"//Test9. Verify that the response contains the required fields\r",
									"pm.test(\"Response contains required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    responseData.docs.forEach(function(docs) {\r",
									"        pm.expect(responseData.docs[0]).to.have.property('height').that.is.an('Object').and.not.empty;\r",
									"        pm.expect(responseData.docs[0]).to.have.property('diameter').that.is.an('Object').and.not.empty;\r",
									"        pm.expect(responseData.docs[0]).to.have.property('mass').that.is.an('Object').and.not.empty;\r",
									"        pm.expect(responseData.docs[0]).to.have.property('first_stage').that.is.an('Object').and.not.empty;\r",
									"        pm.expect(responseData.docs[0]).to.have.property('second_stage').that.is.an('Object').and.not.empty;\r",
									"        pm.expect(responseData.docs[0]).to.have.property('engines').that.is.an('Object').and.not.empty;\r",
									"        pm.expect(responseData.docs[0]).to.have.property('landing_legs').that.is.an('Object').and.not.empty;\r",
									"        pm.expect(responseData.docs[0]).to.have.property('payload_weights').that.is.an('array').and.not.empty;\r",
									"        pm.expect(responseData.docs[0]).to.have.property('name').that.is.an('string').and.not.empty;\r",
									"        pm.expect(responseData.docs[0]).to.have.property('company').that.is.an('string').and.not.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"//Test10. Verify response property, format and length\r",
									"pm.test(\"Verify response property, format and length\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('docs').that.is.an('array').with.length.above(0);\r",
									"});\r",
									"\r",
									"//Test11. Verify the length of the response data\r",
									"pm.test(\"The response data length must be greater than zero\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(Object.keys(responseData).length).to.be.above(0, \"Response data should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "spacex-key",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"docs\": [\r\n        {\r\n            \"height\": {\r\n                \"meters\": \"{{HM}}\",\r\n                \"feet\": \"{{HF}}\"\r\n            },\r\n            \"diameter\": {\r\n                \"meters\": \"{{DM}}\",\r\n                \"feet\": \"{{DF}}\"\r\n            },\r\n            \"mass\": {\r\n                \"kg\": \"{{MKG}}\",\r\n                \"lb\": \"{{MLB}}\"\r\n            },\r\n            \"first_stage\": {\r\n                \"thrust_sea_level\": {\r\n                    \"kN\": \"{{FSTKN}}\",\r\n                    \"lbf\": \"{{FSTLBF}}\"\r\n                },\r\n                \"thrust_vacuum\": {\r\n                    \"kN\": 480,\r\n                    \"lbf\": 110000\r\n                },\r\n                \"reusable\": false,\r\n                \"engines\": 1,\r\n                \"fuel_amount_tons\": 44.3,\r\n                \"burn_time_sec\": 169\r\n            },\r\n            \"second_stage\": {\r\n                \"thrust\": {\r\n                    \"kN\": \"{{SSTKN}}\",\r\n                    \"lbf\": \"{{SSTLBF}}\"\r\n                },\r\n                \"payloads\": {\r\n                    \"composite_fairing\": {\r\n                        \"height\": {\r\n                            \"meters\": 3.5,\r\n                            \"feet\": 11.5\r\n                        },\r\n                        \"diameter\": {\r\n                            \"meters\": 1.5,\r\n                            \"feet\": 4.9\r\n                        }\r\n                    },\r\n                    \"option_1\": \"composite fairing\"\r\n                },\r\n                \"reusable\": false,\r\n                \"engines\": 1,\r\n                \"fuel_amount_tons\": 3.38,\r\n                \"burn_time_sec\": 378\r\n            },\r\n            \"engines\": {\r\n                \"isp\": {\r\n                    \"sea_level\": 267,\r\n                    \"vacuum\": 304\r\n                },\r\n                \"thrust_sea_level\": {\r\n                    \"kN\": 420,\r\n                    \"lbf\": 94000\r\n                },\r\n                \"thrust_vacuum\": {\r\n                    \"kN\": 480,\r\n                    \"lbf\": 110000\r\n                },\r\n                \"number\": 1,\r\n                \"type\": \"merlin\",\r\n                \"version\": \"1C\",\r\n                \"layout\": \"single\",\r\n                \"engine_loss_max\": 0,\r\n                \"propellant_1\": \"liquid oxygen\",\r\n                \"propellant_2\": \"RP-1 kerosene\",\r\n                \"thrust_to_weight\": 96\r\n            },\r\n            \"landing_legs\": {\r\n                \"number\": 0,\r\n                \"material\": null\r\n            },\r\n            \"payload_weights\": [\r\n                {\r\n                    \"id\": \"leo\",\r\n                    \"name\": \"Low Earth Orbit\",\r\n                    \"kg\": 450,\r\n                    \"lb\": 992\r\n                }\r\n            ],\r\n            \"flickr_images\": [\r\n                \"https://imgur.com/DaCfMsj.jpg\",\r\n                \"https://imgur.com/azYafd8.jpg\"\r\n            ],\r\n            \"name\": \"Falcon 1\",\r\n            \"type\": \"rocket\",\r\n            \"active\": false,\r\n            \"stages\": 2,\r\n            \"boosters\": 0,\r\n            \"cost_per_launch\": 6700000,\r\n            \"success_rate_pct\": 40,\r\n            \"first_flight\": \"2006-03-24\",\r\n            \"country\": \"Republic of the Marshall Islands\",\r\n            \"company\": \"SpaceX\",\r\n            \"wikipedia\": \"https://en.wikipedia.org/wiki/Falcon_1\",\r\n            \"description\": \"The Falcon 1 was an expendable launch system privately developed and manufactured by SpaceX during 2006-2009. On 28 September 2008, Falcon 1 became the first privately-developed liquid-fuel launch vehicle to go into orbit around the Earth.\",\r\n            \"id\": \"5e9d0d95eda69955f709d1eb\"\r\n        },\r\n        {\r\n            \"height\": {\r\n                \"meters\": 70,\r\n                \"feet\": 229.6\r\n            },\r\n            \"diameter\": {\r\n                \"meters\": 3.7,\r\n                \"feet\": 12\r\n            },\r\n            \"mass\": {\r\n                \"kg\": 549054,\r\n                \"lb\": 1207920\r\n            },\r\n            \"first_stage\": {\r\n                \"thrust_sea_level\": {\r\n                    \"kN\": 7607,\r\n                    \"lbf\": 1710000\r\n                },\r\n                \"thrust_vacuum\": {\r\n                    \"kN\": 8227,\r\n                    \"lbf\": 1849500\r\n                },\r\n                \"reusable\": true,\r\n                \"engines\": 9,\r\n                \"fuel_amount_tons\": 385,\r\n                \"burn_time_sec\": 162\r\n            },\r\n            \"second_stage\": {\r\n                \"thrust\": {\r\n                    \"kN\": 934,\r\n                    \"lbf\": 210000\r\n                },\r\n                \"payloads\": {\r\n                    \"composite_fairing\": {\r\n                        \"height\": {\r\n                            \"meters\": 13.1,\r\n                            \"feet\": 43\r\n                        },\r\n                        \"diameter\": {\r\n                            \"meters\": 5.2,\r\n                            \"feet\": 17.1\r\n                        }\r\n                    },\r\n                    \"option_1\": \"dragon\"\r\n                },\r\n                \"reusable\": false,\r\n                \"engines\": 1,\r\n                \"fuel_amount_tons\": 90,\r\n                \"burn_time_sec\": 397\r\n            },\r\n            \"engines\": {\r\n                \"isp\": {\r\n                    \"sea_level\": 288,\r\n                    \"vacuum\": 312\r\n                },\r\n                \"thrust_sea_level\": {\r\n                    \"kN\": 845,\r\n                    \"lbf\": 190000\r\n                },\r\n                \"thrust_vacuum\": {\r\n                    \"kN\": 914,\r\n                    \"lbf\": 205500\r\n                },\r\n                \"number\": 9,\r\n                \"type\": \"merlin\",\r\n                \"version\": \"1D+\",\r\n                \"layout\": \"octaweb\",\r\n                \"engine_loss_max\": 2,\r\n                \"propellant_1\": \"liquid oxygen\",\r\n                \"propellant_2\": \"RP-1 kerosene\",\r\n                \"thrust_to_weight\": 180.1\r\n            },\r\n            \"landing_legs\": {\r\n                \"number\": 4,\r\n                \"material\": \"carbon fiber\"\r\n            },\r\n            \"payload_weights\": [\r\n                {\r\n                    \"id\": \"leo\",\r\n                    \"name\": \"Low Earth Orbit\",\r\n                    \"kg\": 22800,\r\n                    \"lb\": 50265\r\n                },\r\n                {\r\n                    \"id\": \"gto\",\r\n                    \"name\": \"Geosynchronous Transfer Orbit\",\r\n                    \"kg\": 8300,\r\n                    \"lb\": 18300\r\n                },\r\n                {\r\n                    \"id\": \"mars\",\r\n                    \"name\": \"Mars Orbit\",\r\n                    \"kg\": 4020,\r\n                    \"lb\": 8860\r\n                }\r\n            ],\r\n            \"flickr_images\": [\r\n                \"https://farm1.staticflickr.com/929/28787338307_3453a11a77_b.jpg\",\r\n                \"https://farm4.staticflickr.com/3955/32915197674_eee74d81bb_b.jpg\",\r\n                \"https://farm1.staticflickr.com/293/32312415025_6841e30bf1_b.jpg\",\r\n                \"https://farm1.staticflickr.com/623/23660653516_5b6cb301d1_b.jpg\",\r\n                \"https://farm6.staticflickr.com/5518/31579784413_d853331601_b.jpg\",\r\n                \"https://farm1.staticflickr.com/745/32394687645_a9c54a34ef_b.jpg\"\r\n            ],\r\n            \"name\": \"Falcon 9\",\r\n            \"type\": \"rocket\",\r\n            \"active\": true,\r\n            \"stages\": 2,\r\n            \"boosters\": 0,\r\n            \"cost_per_launch\": 50000000,\r\n            \"success_rate_pct\": 98,\r\n            \"first_flight\": \"2010-06-04\",\r\n            \"country\": \"United States\",\r\n            \"company\": \"SpaceX\",\r\n            \"wikipedia\": \"https://en.wikipedia.org/wiki/Falcon_9\",\r\n            \"description\": \"Falcon 9 is a two-stage rocket designed and manufactured by SpaceX for the reliable and safe transport of satellites and the Dragon spacecraft into orbit.\",\r\n            \"id\": \"5e9d0d95eda69973a809d1ec\"\r\n        },\r\n        {\r\n            \"height\": {\r\n                \"meters\": 70,\r\n                \"feet\": 229.6\r\n            },\r\n            \"diameter\": {\r\n                \"meters\": 12.2,\r\n                \"feet\": 39.9\r\n            },\r\n            \"mass\": {\r\n                \"kg\": 1420788,\r\n                \"lb\": 3125735\r\n            },\r\n            \"first_stage\": {\r\n                \"thrust_sea_level\": {\r\n                    \"kN\": 22819,\r\n                    \"lbf\": 5130000\r\n                },\r\n                \"thrust_vacuum\": {\r\n                    \"kN\": 24681,\r\n                    \"lbf\": 5548500\r\n                },\r\n                \"reusable\": true,\r\n                \"engines\": 27,\r\n                \"fuel_amount_tons\": 1155,\r\n                \"burn_time_sec\": 162\r\n            },\r\n            \"second_stage\": {\r\n                \"thrust\": {\r\n                    \"kN\": 934,\r\n                    \"lbf\": 210000\r\n                },\r\n                \"payloads\": {\r\n                    \"composite_fairing\": {\r\n                        \"height\": {\r\n                            \"meters\": 13.1,\r\n                            \"feet\": 43\r\n                        },\r\n                        \"diameter\": {\r\n                            \"meters\": 5.2,\r\n                            \"feet\": 17.1\r\n                        }\r\n                    },\r\n                    \"option_1\": \"dragon\"\r\n                },\r\n                \"reusable\": false,\r\n                \"engines\": 1,\r\n                \"fuel_amount_tons\": 90,\r\n                \"burn_time_sec\": 397\r\n            },\r\n            \"engines\": {\r\n                \"isp\": {\r\n                    \"sea_level\": 288,\r\n                    \"vacuum\": 312\r\n                },\r\n                \"thrust_sea_level\": {\r\n                    \"kN\": 845,\r\n                    \"lbf\": 190000\r\n                },\r\n                \"thrust_vacuum\": {\r\n                    \"kN\": 914,\r\n                    \"lbf\": 205500\r\n                },\r\n                \"number\": 27,\r\n                \"type\": \"merlin\",\r\n                \"version\": \"1D+\",\r\n                \"layout\": \"octaweb\",\r\n                \"engine_loss_max\": 6,\r\n                \"propellant_1\": \"liquid oxygen\",\r\n                \"propellant_2\": \"RP-1 kerosene\",\r\n                \"thrust_to_weight\": 180.1\r\n            },\r\n            \"landing_legs\": {\r\n                \"number\": 12,\r\n                \"material\": \"carbon fiber\"\r\n            },\r\n            \"payload_weights\": [\r\n                {\r\n                    \"id\": \"leo\",\r\n                    \"name\": \"Low Earth Orbit\",\r\n                    \"kg\": 63800,\r\n                    \"lb\": 140660\r\n                },\r\n                {\r\n                    \"id\": \"gto\",\r\n                    \"name\": \"Geosynchronous Transfer Orbit\",\r\n                    \"kg\": 26700,\r\n                    \"lb\": 58860\r\n                },\r\n                {\r\n                    \"id\": \"mars\",\r\n                    \"name\": \"Mars Orbit\",\r\n                    \"kg\": 16800,\r\n                    \"lb\": 37040\r\n                },\r\n                {\r\n                    \"id\": \"pluto\",\r\n                    \"name\": \"Pluto Orbit\",\r\n                    \"kg\": 3500,\r\n                    \"lb\": 7720\r\n                }\r\n            ],\r\n            \"flickr_images\": [\r\n                \"https://farm5.staticflickr.com/4599/38583829295_581f34dd84_b.jpg\",\r\n                \"https://farm5.staticflickr.com/4645/38583830575_3f0f7215e6_b.jpg\",\r\n                \"https://farm5.staticflickr.com/4696/40126460511_b15bf84c85_b.jpg\",\r\n                \"https://farm5.staticflickr.com/4711/40126461411_aabc643fd8_b.jpg\"\r\n            ],\r\n            \"name\": \"Falcon Heavy\",\r\n            \"type\": \"rocket\",\r\n            \"active\": true,\r\n            \"stages\": 2,\r\n            \"boosters\": 2,\r\n            \"cost_per_launch\": 90000000,\r\n            \"success_rate_pct\": 100,\r\n            \"first_flight\": \"2018-02-06\",\r\n            \"country\": \"United States\",\r\n            \"company\": \"SpaceX\",\r\n            \"wikipedia\": \"https://en.wikipedia.org/wiki/Falcon_Heavy\",\r\n            \"description\": \"With the ability to lift into orbit over 54 metric tons (119,000 lb)--a mass equivalent to a 737 jetliner loaded with passengers, crew, luggage and fuel--Falcon Heavy can lift more than twice the payload of the next closest operational vehicle, the Delta IV Heavy, at one-third the cost.\",\r\n            \"id\": \"5e9d0d95eda69974db09d1ed\"\r\n        },\r\n        {\r\n            \"height\": {\r\n                \"meters\": 118,\r\n                \"feet\": 387\r\n            },\r\n            \"diameter\": {\r\n                \"meters\": 9,\r\n                \"feet\": 30\r\n            },\r\n            \"mass\": {\r\n                \"kg\": 1335000,\r\n                \"lb\": 2943000\r\n            },\r\n            \"first_stage\": {\r\n                \"thrust_sea_level\": {\r\n                    \"kN\": 128000,\r\n                    \"lbf\": 28775544\r\n                },\r\n                \"thrust_vacuum\": {\r\n                    \"kN\": 138000,\r\n                    \"lbf\": 31023634\r\n                },\r\n                \"reusable\": true,\r\n                \"engines\": 37,\r\n                \"fuel_amount_tons\": 3300,\r\n                \"burn_time_sec\": null\r\n            },\r\n            \"second_stage\": {\r\n                \"thrust\": {\r\n                    \"kN\": 1957,\r\n                    \"lbf\": 440000\r\n                },\r\n                \"payloads\": {\r\n                    \"composite_fairing\": {\r\n                        \"height\": {\r\n                            \"meters\": null,\r\n                            \"feet\": null\r\n                        },\r\n                        \"diameter\": {\r\n                            \"meters\": null,\r\n                            \"feet\": null\r\n                        }\r\n                    },\r\n                    \"option_1\": \"Spaceship\"\r\n                },\r\n                \"reusable\": true,\r\n                \"engines\": 6,\r\n                \"fuel_amount_tons\": 1200,\r\n                \"burn_time_sec\": null\r\n            },\r\n            \"engines\": {\r\n                \"isp\": {\r\n                    \"sea_level\": 330,\r\n                    \"vacuum\": 380\r\n                },\r\n                \"thrust_sea_level\": {\r\n                    \"kN\": 1780,\r\n                    \"lbf\": 400000\r\n                },\r\n                \"thrust_vacuum\": {\r\n                    \"kN\": 1960,\r\n                    \"lbf\": 440000\r\n                },\r\n                \"number\": 37,\r\n                \"type\": \"raptor\",\r\n                \"version\": \"\",\r\n                \"layout\": null,\r\n                \"engine_loss_max\": null,\r\n                \"propellant_1\": \"liquid oxygen\",\r\n                \"propellant_2\": \"liquid methane\",\r\n                \"thrust_to_weight\": 107\r\n            },\r\n            \"landing_legs\": {\r\n                \"number\": 6,\r\n                \"material\": \"stainless steel\"\r\n            },\r\n            \"payload_weights\": [\r\n                {\r\n                    \"id\": \"leo\",\r\n                    \"name\": \"Low Earth Orbit\",\r\n                    \"kg\": 150000,\r\n                    \"lb\": 330000\r\n                },\r\n                {\r\n                    \"id\": \"mars\",\r\n                    \"name\": \"Mars Orbit\",\r\n                    \"kg\": 100000,\r\n                    \"lb\": 220000\r\n                },\r\n                {\r\n                    \"id\": \"moon\",\r\n                    \"name\": \"Moon Orbit\",\r\n                    \"kg\": 100000,\r\n                    \"lb\": 220000\r\n                }\r\n            ],\r\n            \"flickr_images\": [\r\n                \"https://live.staticflickr.com/65535/48954138962_ee541e6755_b.jpg\",\r\n                \"https://live.staticflickr.com/65535/48953946911_e60c5bcc5c_b.jpg\",\r\n                \"https://live.staticflickr.com/65535/48954138922_9c42173f08_b.jpg\",\r\n                \"https://live.staticflickr.com/65535/48953947006_313f01ec93_b.jpg\"\r\n            ],\r\n            \"name\": \"{{NAME}}\",\r\n            \"type\": \"rocket\",\r\n            \"active\": false,\r\n            \"stages\": 2,\r\n            \"boosters\": 0,\r\n            \"cost_per_launch\": 7000000,\r\n            \"success_rate_pct\": 0,\r\n            \"first_flight\": \"2021-12-01\",\r\n            \"country\": \"United States\",\r\n            \"company\": \"{{COMPANY}}\",\r\n            \"wikipedia\": \"{{WIKI}}\",\r\n            \"description\": \"Starship and Super Heavy Rocket represent a fully reusable transportation system designed to service all Earth orbit needs as well as the Moon and Mars. This two-stage vehicle — composed of the Super Heavy rocket (booster) and Starship (ship) — will eventually replace Falcon 9, Falcon Heavy and Dragon.\",\r\n            \"id\": \"5e9d0d96eda699382d09d1ee\"\r\n        }\r\n    ],\r\n    \"totalDocs\": 4,\r\n    \"offset\": 0,\r\n    \"limit\": 10,\r\n    \"totalPages\": 1,\r\n    \"page\": 1,\r\n    \"pagingCounter\": 1,\r\n    \"hasPrevPage\": false,\r\n    \"hasNextPage\": false,\r\n    \"prevPage\": null,\r\n    \"nextPage\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/query",
							"host": [
								"{{URL}}"
							],
							"path": [
								"query"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "Update Rocket without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1. Validate status code\r",
									"pm.test(\"Response status code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.not.oneOf([200, 201, 202, 203, 204, 205,206,207, 208, 226]);\r",
									"});\r",
									"\r",
									"//Test2. Validate the response time\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Test3. Validate the response size\r",
									"pm.test(\"Response size is less than 50KB\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(51200);\r",
									"});\r",
									"\r",
									"//Test4. Response should be okay to process\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.be.json;\r",
									"});\r",
									"\r",
									"//Test5. Verify response headers\r",
									"pm.test(\"Response Header is present and correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"CF-Cache-Status\", \"DYNAMIC\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"    pm.response.to.have.header(\"Server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"//Test6. Verify response body\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://youtu.be/RfiQYRn7fBg\");\r",
									"});\r",
									"\r",
									"//Test7. Verify the length of the response data\r",
									"pm.test(\"The response data length must be greater than zero\", function () {\r",
									"    pm.expect(Object.keys(pm.response).length).to.be.above(0, \"Response data should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "https://api.spacexdata.com/v4/dragons/{{RocketsID}}",
							"protocol": "https",
							"host": [
								"api",
								"spacexdata",
								"com"
							],
							"path": [
								"v4",
								"dragons",
								"{{RocketsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Rocket without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1. Validate status code\r",
									"pm.test(\"Response status code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.not.oneOf([200, 201, 202, 203, 204, 205,206,207, 208, 226]);\r",
									"});\r",
									"\r",
									"//Test2. Validate the response time\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Test3. Validate the response size\r",
									"pm.test(\"Response size is less than 50KB\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(51200);\r",
									"});\r",
									"\r",
									"//Test4. Response should be okay to process\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.be.json;\r",
									"});\r",
									"\r",
									"//Test5. Verify response headers\r",
									"pm.test(\"Response Header is present and correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"CF-Cache-Status\", \"DYNAMIC\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"    pm.response.to.have.header(\"Server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"//Test6. Verify response body\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://youtu.be/RfiQYRn7fBg\");\r",
									"});\r",
									"\r",
									"//Test7. Verify the length of the response data\r",
									"pm.test(\"The response data length must be greater than zero\", function () {\r",
									"    pm.expect(Object.keys(pm.response).length).to.be.above(0, \"Response data should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.spacexdata.com/v4/rockets",
							"protocol": "https",
							"host": [
								"api",
								"spacexdata",
								"com"
							],
							"path": [
								"v4",
								"rockets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Rocket without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1. Validate status code\r",
									"pm.test(\"Response status code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.not.oneOf([200, 201, 202, 203, 204, 205,206,207, 208, 226]);\r",
									"});\r",
									"\r",
									"//Test2. Validate the response time\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Test3. Validate the response size\r",
									"pm.test(\"Response size is less than 50KB\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(51200);\r",
									"});\r",
									"\r",
									"//Test4. Response should be okay to process\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.be.json;\r",
									"});\r",
									"\r",
									"//Test5. Verify response headers\r",
									"pm.test(\"Response Header is present and correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"CF-Cache-Status\", \"DYNAMIC\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"    pm.response.to.have.header(\"Server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"//Test6. Verify response body\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://youtu.be/RfiQYRn7fBg\");\r",
									"});\r",
									"\r",
									"//Test7. Verify the length of the response data\r",
									"pm.test(\"The response data length must be greater than zero\", function () {\r",
									"    pm.expect(Object.keys(pm.response).length).to.be.above(0, \"Response data should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.spacexdata.com/v4/rockets/{{RocketsID}}",
							"protocol": "https",
							"host": [
								"api",
								"spacexdata",
								"com"
							],
							"path": [
								"v4",
								"rockets",
								"{{RocketsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one Rocket wrong ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1. Validate status code\r",
									"if (responseCode.code === 200) {\r",
									"    tests[\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not authorised, Check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests[\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"//Test2. Validate the response time\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Test3. Validate the response size\r",
									"pm.test(\"Response size is less than 50KB\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(51200);\r",
									"});\r",
									"\r",
									"//Test4. Response should be okay to process\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"//Test5. Verify response headers\r",
									"pm.test(\"Response Header is present and correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"CF-Cache-Status\", \"DYNAMIC\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"SAMEORIGIN\");\r",
									"    pm.response.to.have.header(\"Server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"//Test6. Verify response body\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"height\");\r",
									"    pm.expect(pm.response.text()).to.include(\"diameter\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_stage\");\r",
									"    pm.expect(pm.response.text()).to.include(\"thrust_sea_level\");\r",
									"    pm.expect(pm.response.text()).to.include(\"reusable\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_stage\");\r",
									"});\r",
									"\r",
									"//Test7. Response contains correct text\r",
									"pm.test(\"Response contains correct text\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include.toString(pm.environment.get(\"HM\"));\r",
									"    pm.expect(pm.response.text()).to.not.include.toString(pm.environment.get(\"FSTKN\"));\r",
									"    pm.expect(pm.response.text()).to.not.include.toString(pm.environment.get(\"SSPHF\"));\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.environment.get(\"NAME\"));\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.environment.get(\"WIKI\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COMPANY\"));\r",
									"});\r",
									"\r",
									"//Test8. Verify response value\r",
									"pm.test(\"Value is correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.height.meters).to.not.eql.toString(pm.environment.get(\"HM\"));\r",
									"    pm.expect(jsonData.diameter.feet).to.not.eql.toString(pm.environment.get(\"DF\"));\r",
									"    pm.expect(jsonData.first_stage.thrust_sea_level.kN).to.not.eql.toString(pm.environment.get(\"FSTKN\"));\r",
									"    pm.expect(jsonData.second_stage.thrust.lbf).to.not.eql.toString(pm.environment.get(\"SSTLBF\"));\r",
									"    pm.expect(jsonData.second_stage.payloads.composite_fairing.height.meters).to.not.eql.toString(pm.environment.get(\"SSPHM\"));\r",
									"    pm.expect(jsonData.id).to.not.eql(pm.environment.get(\"RocketsID\"));\r",
									"});\r",
									"\r",
									"//Test9. Verify response body format\r",
									"pm.test(\"Response body should be in the correct format\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.height.meters).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.first_stage.thrust_sea_level.kN).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.second_stage.payloads.composite_fairing.height.meters).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse.company).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse.wikipedia).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse.id).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Test10. Verify the length of the response data\r",
									"pm.test(\"The response data length must be greater than zero\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(Object.keys(responseData).length).to.be.above(0, \"Response data should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "spacex-key",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spacexdata.com/v4/rockets/5e9d0d95eda69955f709d1eb",
							"protocol": "https",
							"host": [
								"api",
								"spacexdata",
								"com"
							],
							"path": [
								"v4",
								"rockets",
								"5e9d0d95eda69955f709d1eb"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "spacex-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}